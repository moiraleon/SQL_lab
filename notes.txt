Select(*)FROM table_name; (counts rows regardless of null values)

Aggregate Function
SELECT count(column_name) FROM table_name; (count only works for rows that are not null)
or sub for count (max, min, avg, sum -- only work for number types)

SELECT genre,sum(cost)
FROM movies
GROUP BY genre;

HAVING count(*) >1;
WHERE cost >= 100000;


NOT NULL 
UNIQUE constraints
PRIMARY KEY makes not null and unique - can only be used once in a table

movie_id int REFERENCES movies(id); or without id

CHECK constraint

durationint CHECK( duration>0)

CREATE TABLE Actors (
  id int PRIMARY KEY,
  name varchar(50) NOT NULL UNIQUE,
  country_id int,
  FOREIGN KEY (country_id) REFERENCES Countries(id)
);

1 --- * one to many
* --- * many to many
1 --- 1 one to one

SELECT Movies.title, Rooms.id, Rooms.seats FROM Movies
INNER JOIN Rooms
ON Movies.id = Rooms.movie_id
WHERE Rooms.seats > 75
ORDER BY Rooms.seats DESC;

aliases with two words for columns ""

Movies m

Select movie_id from Rooms where seats >75
Select movie_id from Rooms where seats >75

select id from Rooms where seats >(select avg(seats)from Rooms);

SELECT r.id, m.title
FROM rooms r
LEFT OUTER JOIN movies m
ON r.movie_id = m.id
WHERE seats > (SELECT AVG(seats) FROM rooms);


SELECT * 
FROM "Customer"
WHERE "Zipcode" LIKE '%0'; finds zipcodes starting with 0

SELECT * 
FROM "Customer"
WHERE EXTRACT(ONTH FROM "Birthdate") = 1; returns data with birthdate in january

macaddr - mac address data types

Each schema can only have unique table names


Creating constraints--under tables--under table name-- select constraints-- select new object--new check-- create name for constraint----create definition(i.e. "Age">=0(column name))--select ok
you can not create a constraint if values in your table are already violating that constraint


Creating not null constraint

ALTER TABLE "SCHEMANAME"."TABLENAME" ALTER COLUMN "COLUMNNAME"SET NOT NULL;

Adding a unique contsraint 

ADD CONSTRAINT "UniqueID" UNIQUE ("ID");
ADD CONSTRAINT "nameofconstraint" UNIQUE ("column");

Postgres will not enforce use of primary key in every table

Adding a primary key

ALTER TABLE "SCHEMANAME"."TABLENAME" ADD PRIMARY KEY ("COLUMNNAME");

Adding a foreign key

ALTER TABLE "SCHEMA"."TABLE"
ADD CONSTRAINT "NAMEOFCONSTRAINT"
FOREIGN KEY ("EMPLOYEEIDCOLUMN")
REFERENCES"SCHAME"."TABLENAME"("COLUMNID") MATCH FULL;


last_update timestamp wihtout time zone NOT NULLDEFAULT now();

inserting values from one table to another

INSERT INTO actornew(actor_id, first_name, last_name, last_update)
SELECT actor_id, first_name, last_name, last_update
FROM actor
WHERE actor_id >4; inserts all actors from the actor table with listed values who have n id greater than 4 into the new actor table

getting film count of actor based off of actor id and films associated with using aggregate Function
SELECT a.actor_id,count(title) FilmCount,
FROM Actor a
...inner joins
group by a.actor_id

Pushing these counts to the actornew table


UPDATE actornew
SET "FilmCount" =(
SELECTcount(title) FilmCount,  //removing a.actor_id,
FROM Actor a
...inner joins
WHERE a.actor_id = actornew.actor_id //setting to right actor
group by a.actor_id
);


adding last time update by invking and selecting which row to update and how in previous query as follows

UPDATE actornew
SET "FilmCount" =(
SELECTcount(title) FilmCount,  //removing a.actor_id,
FROM Actor a
...inner joins
WHERE a.actor_id = actornew.actor_id //setting to right actor
group by a.actor_id
last_update = now()
);

updating tables to exclude and include separate qualities


Remove rows with actor_id>40
&&
keep rows with film count >30]
move rows with film count <= 30]
  


  Before removing data do a select statement to confirm the resulting data is within the constraints

SELECT * FROM actornew
WHERE "actor_id" > 40 AND "FilmCount"<=30
ORDER BY actor_id;


Now convert to delete statment -delete does now support order by and change select to delete

DELETE * FROM actornew
WHERE "actor_id" > 40 AND "FilmCount"<=30;

always specify a where statement when runnign a delete command or you will risk deleting all your data

